org: mikelmaron
app: serverless-rest-api-with-dynamodb-app
service: serverless-rest-api-with-dynamodb

frameworkVersion: ">=1.1.0 <2.0.0"

custom:
  bucket: spot-the-box
  bucket-photos: spot-the-box-imgs
provider:
  name: aws
  runtime: python3.8
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:PutObjectAcl
      Resource: "arn:aws:s3:::${self:custom.bucket}/*"
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:PutObjectAcl
      Resource: "arn:aws:s3:::${self:custom.bucket-photos}/*"

functions:
  create:
    handler: mailbox/create.create
    events:
      - http:
          path: mailbox
          method: post
          cors: true

  list:
    handler: mailbox/list.list
    events:
      - http:
          path: mailbox
          method: get
          cors: true
    environment:
      BUCKET: ${self:custom.bucket}
  photo:
    handler: mailbox/photo.add_photo
    events:
      - http:
          path: photo
          method: post
          cors: true
    environment:
      BUCKET: ${self:custom.bucket-photos}

resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
